
CubeIDEBased.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000208  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080004a0  080004a8  000104a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .init_array   00000004  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080004a4  080004a4  000104a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000000  24000000  24000000  000104a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000001c  24000000  080004a8  00020000  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400001c  080004a8  0002001c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  000104a8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000104d6  2**0
                  CONTENTS, READONLY
 10 .debug_info   000001c2  00000000  00000000  00010519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00000110  00000000  00000000  000106db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000078  00000000  00000000  000107f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000050  00000000  00000000  00010868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00000f70  00000000  00000000  000108b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000004bb  00000000  00000000  00011828  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00003c9a  00000000  00000000  00011ce3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  0000012c  00000000  00000000  00015980  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 0000006c  00000000  00000000  00015aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000000 	.word	0x24000000
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08000488 	.word	0x08000488

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000004 	.word	0x24000004
 80002d4:	08000488 	.word	0x08000488

080002d8 <main>:
void gpio_set_pin(uint16_t value);
void gpio_clear_pin(uint16_t value);
void GPIO_Init(void);

int main(void)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	af00      	add	r7, sp, #0

	GPIO_Init();
 80002dc:	f000 f864 	bl	80003a8 <GPIO_Init>

	while (1)
	{
		gpio_clear_pin(0);
 80002e0:	2000      	movs	r0, #0
 80002e2:	f000 f84f 	bl	8000384 <gpio_clear_pin>
		delay();
 80002e6:	f000 f817 	bl	8000318 <delay>

		//gpio_clear_pin(7);
		delay();
 80002ea:	f000 f815 	bl	8000318 <delay>

		gpio_clear_pin(14);
 80002ee:	200e      	movs	r0, #14
 80002f0:	f000 f848 	bl	8000384 <gpio_clear_pin>
		delay();
 80002f4:	f000 f810 	bl	8000318 <delay>

		gpio_set_pin(0);
 80002f8:	2000      	movs	r0, #0
 80002fa:	f000 f833 	bl	8000364 <gpio_set_pin>
		delay();
 80002fe:	f000 f80b 	bl	8000318 <delay>

		gpio_set_pin(7);
 8000302:	2007      	movs	r0, #7
 8000304:	f000 f82e 	bl	8000364 <gpio_set_pin>
		delay();
 8000308:	f000 f806 	bl	8000318 <delay>

		gpio_set_pin(14);
 800030c:	200e      	movs	r0, #14
 800030e:	f000 f829 	bl	8000364 <gpio_set_pin>
		delay();
 8000312:	f000 f801 	bl	8000318 <delay>
		gpio_clear_pin(0);
 8000316:	e7e3      	b.n	80002e0 <main+0x8>

08000318 <delay>:
	}
}

void delay()
{
 8000318:	b480      	push	{r7}
 800031a:	b083      	sub	sp, #12
 800031c:	af00      	add	r7, sp, #0
	uint32_t delay_count = 10000000;
 800031e:	4b07      	ldr	r3, [pc, #28]	; (800033c <delay+0x24>)
 8000320:	607b      	str	r3, [r7, #4]
	while (delay_count--);
 8000322:	bf00      	nop
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	1e5a      	subs	r2, r3, #1
 8000328:	607a      	str	r2, [r7, #4]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d1fa      	bne.n	8000324 <delay+0xc>
}
 800032e:	bf00      	nop
 8000330:	bf00      	nop
 8000332:	370c      	adds	r7, #12
 8000334:	46bd      	mov	sp, r7
 8000336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033a:	4770      	bx	lr
 800033c:	00989680 	.word	0x00989680

08000340 <set_gpio_port_b_reg>:

void set_gpio_port_b_reg(uint32_t value)
{
 8000340:	b480      	push	{r7}
 8000342:	b085      	sub	sp, #20
 8000344:	af00      	add	r7, sp, #0
 8000346:	6078      	str	r0, [r7, #4]
	uint32_t *GPIO_PortB_Set_Reset = (uint32_t*) 0x58020418UL;
 8000348:	4b05      	ldr	r3, [pc, #20]	; (8000360 <set_gpio_port_b_reg+0x20>)
 800034a:	60fb      	str	r3, [r7, #12]
	*GPIO_PortB_Set_Reset = value;
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	687a      	ldr	r2, [r7, #4]
 8000350:	601a      	str	r2, [r3, #0]
}
 8000352:	bf00      	nop
 8000354:	3714      	adds	r7, #20
 8000356:	46bd      	mov	sp, r7
 8000358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop
 8000360:	58020418 	.word	0x58020418

08000364 <gpio_set_pin>:

void gpio_set_pin(uint16_t value)
{
 8000364:	b580      	push	{r7, lr}
 8000366:	b082      	sub	sp, #8
 8000368:	af00      	add	r7, sp, #0
 800036a:	4603      	mov	r3, r0
 800036c:	80fb      	strh	r3, [r7, #6]
	set_gpio_port_b_reg(1 << value);
 800036e:	88fb      	ldrh	r3, [r7, #6]
 8000370:	2201      	movs	r2, #1
 8000372:	fa02 f303 	lsl.w	r3, r2, r3
 8000376:	4618      	mov	r0, r3
 8000378:	f7ff ffe2 	bl	8000340 <set_gpio_port_b_reg>
}
 800037c:	bf00      	nop
 800037e:	3708      	adds	r7, #8
 8000380:	46bd      	mov	sp, r7
 8000382:	bd80      	pop	{r7, pc}

08000384 <gpio_clear_pin>:

void gpio_clear_pin(uint16_t value)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	b082      	sub	sp, #8
 8000388:	af00      	add	r7, sp, #0
 800038a:	4603      	mov	r3, r0
 800038c:	80fb      	strh	r3, [r7, #6]
	set_gpio_port_b_reg((1 << value) << 16);
 800038e:	88fb      	ldrh	r3, [r7, #6]
 8000390:	2201      	movs	r2, #1
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	041b      	lsls	r3, r3, #16
 8000398:	4618      	mov	r0, r3
 800039a:	f7ff ffd1 	bl	8000340 <set_gpio_port_b_reg>
}
 800039e:	bf00      	nop
 80003a0:	3708      	adds	r7, #8
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bd80      	pop	{r7, pc}
	...

080003a8 <GPIO_Init>:

void GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b082      	sub	sp, #8
 80003ac:	af00      	add	r7, sp, #0
	//GPIO Port B clock enable
	uint32_t *reg = (uint32_t*) 0x580244E0UL;
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <GPIO_Init+0x3c>)
 80003b0:	607b      	str	r3, [r7, #4]
	*reg |= 2;
 80003b2:	687b      	ldr	r3, [r7, #4]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f043 0202 	orr.w	r2, r3, #2
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	601a      	str	r2, [r3, #0]

	/*Configure GPIO pin Output Level */
	gpio_clear_pin(0);
 80003be:	2000      	movs	r0, #0
 80003c0:	f7ff ffe0 	bl	8000384 <gpio_clear_pin>
	gpio_clear_pin(7);
 80003c4:	2007      	movs	r0, #7
 80003c6:	f7ff ffdd 	bl	8000384 <gpio_clear_pin>
	gpio_clear_pin(14);
 80003ca:	200e      	movs	r0, #14
 80003cc:	f7ff ffda 	bl	8000384 <gpio_clear_pin>

	/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
	uint32_t *GPIO_PortB_Mode = (uint32_t*) 0x58020400UL;
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <GPIO_Init+0x40>)
 80003d2:	603b      	str	r3, [r7, #0]
	*GPIO_PortB_Mode = (1 << (0 * 2U)) | (1 << (7 * 2U)) | (1 << (14 * 2U));
 80003d4:	683b      	ldr	r3, [r7, #0]
 80003d6:	4a05      	ldr	r2, [pc, #20]	; (80003ec <GPIO_Init+0x44>)
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	3708      	adds	r7, #8
 80003de:	46bd      	mov	sp, r7
 80003e0:	bd80      	pop	{r7, pc}
 80003e2:	bf00      	nop
 80003e4:	580244e0 	.word	0x580244e0
 80003e8:	58020400 	.word	0x58020400
 80003ec:	10004001 	.word	0x10004001

080003f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80003f0:	f8df d030 	ldr.w	sp, [pc, #48]	; 8000424 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  //bl  SystemInit

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003f4:	480c      	ldr	r0, [pc, #48]	; (8000428 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80003f6:	490d      	ldr	r1, [pc, #52]	; (800042c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80003f8:	4a0d      	ldr	r2, [pc, #52]	; (8000430 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80003fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003fc:	e002      	b.n	8000404 <LoopCopyDataInit>

080003fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000400:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000402:	3304      	adds	r3, #4

08000404 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000404:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000406:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000408:	d3f9      	bcc.n	80003fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800040c:	4c0a      	ldr	r4, [pc, #40]	; (8000438 <LoopFillZerobss+0x22>)
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000410:	e001      	b.n	8000416 <LoopFillZerobss>

08000412 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000412:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000414:	3204      	adds	r2, #4

08000416 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000416:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000418:	d3fb      	bcc.n	8000412 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800041a:	f000 f811 	bl	8000440 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800041e:	f7ff ff5b 	bl	80002d8 <main>
  bx  lr
 8000422:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000424:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000428:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800042c:	24000000 	.word	0x24000000
  ldr r2, =_sidata
 8000430:	080004a8 	.word	0x080004a8
  ldr r2, =_sbss
 8000434:	24000000 	.word	0x24000000
  ldr r4, =_ebss
 8000438:	2400001c 	.word	0x2400001c

0800043c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC3_IRQHandler>
	...

08000440 <__libc_init_array>:
 8000440:	b570      	push	{r4, r5, r6, lr}
 8000442:	4d0d      	ldr	r5, [pc, #52]	; (8000478 <__libc_init_array+0x38>)
 8000444:	4c0d      	ldr	r4, [pc, #52]	; (800047c <__libc_init_array+0x3c>)
 8000446:	1b64      	subs	r4, r4, r5
 8000448:	10a4      	asrs	r4, r4, #2
 800044a:	2600      	movs	r6, #0
 800044c:	42a6      	cmp	r6, r4
 800044e:	d109      	bne.n	8000464 <__libc_init_array+0x24>
 8000450:	4d0b      	ldr	r5, [pc, #44]	; (8000480 <__libc_init_array+0x40>)
 8000452:	4c0c      	ldr	r4, [pc, #48]	; (8000484 <__libc_init_array+0x44>)
 8000454:	f000 f818 	bl	8000488 <_init>
 8000458:	1b64      	subs	r4, r4, r5
 800045a:	10a4      	asrs	r4, r4, #2
 800045c:	2600      	movs	r6, #0
 800045e:	42a6      	cmp	r6, r4
 8000460:	d105      	bne.n	800046e <__libc_init_array+0x2e>
 8000462:	bd70      	pop	{r4, r5, r6, pc}
 8000464:	f855 3b04 	ldr.w	r3, [r5], #4
 8000468:	4798      	blx	r3
 800046a:	3601      	adds	r6, #1
 800046c:	e7ee      	b.n	800044c <__libc_init_array+0xc>
 800046e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000472:	4798      	blx	r3
 8000474:	3601      	adds	r6, #1
 8000476:	e7f2      	b.n	800045e <__libc_init_array+0x1e>
 8000478:	080004a0 	.word	0x080004a0
 800047c:	080004a0 	.word	0x080004a0
 8000480:	080004a0 	.word	0x080004a0
 8000484:	080004a4 	.word	0x080004a4

08000488 <_init>:
 8000488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800048a:	bf00      	nop
 800048c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048e:	bc08      	pop	{r3}
 8000490:	469e      	mov	lr, r3
 8000492:	4770      	bx	lr

08000494 <_fini>:
 8000494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000496:	bf00      	nop
 8000498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800049a:	bc08      	pop	{r3}
 800049c:	469e      	mov	lr, r3
 800049e:	4770      	bx	lr
